---
title: "Hands_on Exercise 1-Geospatial Data Wrangling with R"
author: "Dabbie Neo"
date: 17/11/2023
date-modified: "`r Sys.Date()`"
---

# 1. Getting Started

## 1.1 Data Acquisition

In this hands-on exercise, the necessary data are extracted from the following sources,

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

Next, create two subfolders; `geospatial`and `aspatial.`

Place `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` zipped files into `geospatial` sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside `geospatial` sub-folder.

Place `listing.csv` into `aspatial` sub-folder.

## 1.2 Install and launching of R packages

In this hands-on exercise, two R packages will be used. They are,

-   **sf**: for importing, managing and processing of geospatial data, and

-   **tidyverse**: for performing data science tasks such as importing, wrangling and visualising data

Type the following code chunk.

```{r}
pacman::p_load(sf, tidyverse)
```

[p_load]{.underline} function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf and tidyverse pacages into R environment.

## 1.3 Importing Geospatial Data

In this section, we will import the following geospatial data into R by using [***st_read()***]{.underline} of **sf** package,

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format

### 1.3.1 Importing polygon feature data in shapefile format

The code chunk below uses ***st_read()*** function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame,

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")

# dsn - to define data path
# layer - to provide the shapefile name
# No extension such as .shp,.dbf,.prj and .shx are needed
```

The result above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **SVY21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

### 1.3.2 Importing polyline feature data in shapefile form

The code chunk below uses [***st_read()***]{.underline} function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

The results above reveals that there are a total of 2558 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **SVY21** projected coordinates system too.

### 1.3.3 Importing GIS data in kml format

The `pre-schools-location-kml` is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The result above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **WGS84** coordinates system.

### 1.4 Checking the Content of A Simple Feature Data Frame

In this sub-section, you will learn different ways to retrieve information related to the content of a simple feature data frame.

### 1.4.1 Working with *`st_geometry()`*

The columns in the sf data.frame, containing the geometries, is a list of class `sfc`. We can retrieve the geometry list-column by mpsz\$geom or mpsz\[\[1\]\]. However, the more general way uses `st_geometry()` as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

***st_geometry()*** displays only the basic information of the feature class such as type of geometry, the geographic extent of features and the coordinate system of the data.

### 1.4.2 Working with *`glimpse()`*

The code chunk below allows us to learn more about the associated attribute information in the data frame.

```{r}
glimpse(mpsz)
```

***glimpse()*** reveals the data type of each files. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values.**

### 1.4.3 Working with *`head()`*

To view the complete information of a feature object, use the ***head()*** of Base R.

```{r}
head(mpsz, n=5)  # select n recods to display 
```

## 1.5 Plotting the Geospatial Data

In geospatial data science, looking at just the feature information is not enough. We are also interested to visualise the geospatial features.

```{r}
plot(mpsz)
```

The default plot of an sf object is a *multi-plot of all attributes*, up to a reasonable maximum as shown above. We can, however, choose to plot *only the geometry* by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a *specific attribute* as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

::: {.callout-note icon="false"} 

## Note

*plot()* is meant for plotting the geospatial object for quick look. For high cartographic quality plot, other R packages such as tmap should be used. 

:::

## 1.6 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

### 1.6.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data is either missing (such as due to missing .proj for ESRI shapefile) or its wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Notice that the `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CRS again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is **3414** now.

### 1.6.2 Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

::: {.callout-note icon="false"}

## Note

In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation. 

:::

Next, let's display the content of preschool3414 sf data frame as shown below.

Notice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

## 1.7 Importing and Converting An Aspatial Data

In practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, we will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, we will convert it into a simple feature data frame.

For the purpose of this exercise, the `listings.csv` data downloaded from Inside AirBnb will be used.

### 1.7.1 Importing the aspatial data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows *`list()`* of Base R instead of *`glimpse()`* is used to do the job.

```{r}
list(listings) 
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

### 1.7.2 Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

::: {.callout-note icon="false"} 

## Learning points

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system. 

:::

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## 1.8 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, we will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 1.8.1 Buffering

**Scenario:**

The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 meters of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land needed to be acquired and their total area.

**Solution:**

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, `sum()` of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### 1.8.2 Point-in-polygon count

**Scenario:**

A pre-school service group wants to find out the number of pre-schools in each Planning Subzone.

**Solution:**

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

::: {.callout-note icon="false"}

## Warning

You should not confuse with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).

:::

You can check the summary statistics of the newly derived *PreSch Count* field by using *`summary()`* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```
::: {.callout-note icon="false"} 
## DIY

Calculate the density of pre-school by planning subzone
:::

**Solution:**

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

### 1.9 Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, we will learn how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *`hist()`* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customization.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```
::: {.callout-note icon="false"} 
## DIY

Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.
:::

**Solution:**

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```


